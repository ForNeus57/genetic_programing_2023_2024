# Generated from C:/Users/domin/IdeaProjects/genetic_programing_2023_2024/grammar/MiniGP.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,157,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,55,
        8,0,1,1,3,1,58,8,1,1,1,1,1,5,1,62,8,1,10,1,12,1,65,9,1,1,1,3,1,68,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,108,8,12,1,13,1,13,
        1,13,1,13,1,13,3,13,115,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,5,20,146,8,20,10,20,
        12,20,149,9,20,1,21,4,21,152,8,21,11,21,12,21,153,1,21,1,21,0,0,
        22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,7,1,
        0,49,57,1,0,48,57,3,0,42,43,45,45,47,47,2,0,60,60,62,62,2,0,65,90,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,168,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,1,54,1,0,0,0,3,67,1,0,0,0,5,69,1,0,0,0,7,75,1,0,
        0,0,9,79,1,0,0,0,11,84,1,0,0,0,13,86,1,0,0,0,15,88,1,0,0,0,17,90,
        1,0,0,0,19,92,1,0,0,0,21,94,1,0,0,0,23,96,1,0,0,0,25,107,1,0,0,0,
        27,114,1,0,0,0,29,116,1,0,0,0,31,121,1,0,0,0,33,127,1,0,0,0,35,129,
        1,0,0,0,37,135,1,0,0,0,39,138,1,0,0,0,41,143,1,0,0,0,43,151,1,0,
        0,0,45,46,5,84,0,0,46,47,5,114,0,0,47,48,5,117,0,0,48,55,5,101,0,
        0,49,50,5,70,0,0,50,51,5,97,0,0,51,52,5,108,0,0,52,53,5,115,0,0,
        53,55,5,101,0,0,54,45,1,0,0,0,54,49,1,0,0,0,55,2,1,0,0,0,56,58,5,
        45,0,0,57,56,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,63,7,0,0,0,60,
        62,7,1,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,
        0,64,68,1,0,0,0,65,63,1,0,0,0,66,68,5,48,0,0,67,57,1,0,0,0,67,66,
        1,0,0,0,68,4,1,0,0,0,69,70,5,99,0,0,70,71,5,111,0,0,71,72,5,110,
        0,0,72,73,5,115,0,0,73,74,5,116,0,0,74,6,1,0,0,0,75,76,5,105,0,0,
        76,77,5,110,0,0,77,78,5,116,0,0,78,8,1,0,0,0,79,80,5,98,0,0,80,81,
        5,111,0,0,81,82,5,111,0,0,82,83,5,108,0,0,83,10,1,0,0,0,84,85,5,
        40,0,0,85,12,1,0,0,0,86,87,5,41,0,0,87,14,1,0,0,0,88,89,5,123,0,
        0,89,16,1,0,0,0,90,91,5,125,0,0,91,18,1,0,0,0,92,93,5,59,0,0,93,
        20,1,0,0,0,94,95,5,61,0,0,95,22,1,0,0,0,96,97,7,2,0,0,97,24,1,0,
        0,0,98,108,7,3,0,0,99,100,5,61,0,0,100,108,5,61,0,0,101,102,5,33,
        0,0,102,108,5,61,0,0,103,104,5,62,0,0,104,108,5,61,0,0,105,106,5,
        60,0,0,106,108,5,61,0,0,107,98,1,0,0,0,107,99,1,0,0,0,107,101,1,
        0,0,0,107,103,1,0,0,0,107,105,1,0,0,0,108,26,1,0,0,0,109,110,5,38,
        0,0,110,115,5,38,0,0,111,112,5,124,0,0,112,115,5,124,0,0,113,115,
        5,94,0,0,114,109,1,0,0,0,114,111,1,0,0,0,114,113,1,0,0,0,115,28,
        1,0,0,0,116,117,5,114,0,0,117,118,5,101,0,0,118,119,5,97,0,0,119,
        120,5,100,0,0,120,30,1,0,0,0,121,122,5,119,0,0,122,123,5,114,0,0,
        123,124,5,105,0,0,124,125,5,116,0,0,125,126,5,101,0,0,126,32,1,0,
        0,0,127,128,5,33,0,0,128,34,1,0,0,0,129,130,5,119,0,0,130,131,5,
        104,0,0,131,132,5,105,0,0,132,133,5,108,0,0,133,134,5,101,0,0,134,
        36,1,0,0,0,135,136,5,105,0,0,136,137,5,102,0,0,137,38,1,0,0,0,138,
        139,5,101,0,0,139,140,5,108,0,0,140,141,5,115,0,0,141,142,5,101,
        0,0,142,40,1,0,0,0,143,147,7,4,0,0,144,146,7,5,0,0,145,144,1,0,0,
        0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,42,1,0,0,0,
        149,147,1,0,0,0,150,152,7,6,0,0,151,150,1,0,0,0,152,153,1,0,0,0,
        153,151,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,6,21,0,0,
        156,44,1,0,0,0,9,0,54,57,63,67,107,114,147,153,1,6,0,0
    ]

class MiniGPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL = 1
    INT = 2
    CONST = 3
    INT_TYPE = 4
    BOOL_TYPE = 5
    LPAREN = 6
    RPAREN = 7
    LBRACE = 8
    RBRACE = 9
    SEMICOLON = 10
    ASSIGMENT_OPERATOR = 11
    EXPRESSION_OPERATOR = 12
    EXPRESSION_COMPARISON_OPERATOR = 13
    CONDITION_OPERATOR = 14
    READ = 15
    WRITE = 16
    NEGATION_OPERATOR = 17
    WHILE = 18
    IF = 19
    ELSE = 20
    VAR = 21
    WHITESPACE = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'const'", "'int'", "'bool'", "'('", "')'", "'{'", "'}'", "';'", 
            "'='", "'read'", "'write'", "'!'", "'while'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "INT", "CONST", "INT_TYPE", "BOOL_TYPE", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", "EXPRESSION_OPERATOR", 
            "EXPRESSION_COMPARISON_OPERATOR", "CONDITION_OPERATOR", "READ", 
            "WRITE", "NEGATION_OPERATOR", "WHILE", "IF", "ELSE", "VAR", 
            "WHITESPACE" ]

    ruleNames = [ "BOOL", "INT", "CONST", "INT_TYPE", "BOOL_TYPE", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", 
                  "EXPRESSION_OPERATOR", "EXPRESSION_COMPARISON_OPERATOR", 
                  "CONDITION_OPERATOR", "READ", "WRITE", "NEGATION_OPERATOR", 
                  "WHILE", "IF", "ELSE", "VAR", "WHITESPACE" ]

    grammarFileName = "MiniGP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


