# Generated from C:/Users/domin/IdeaProjects/genetic_programing_2023_2024/grammar/MiniGP.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,3,4,71,8,4,1,5,3,5,74,8,5,1,5,1,5,5,5,78,8,5,10,5,12,5,81,9,5,
        1,5,3,5,84,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,124,
        8,16,1,17,1,17,1,17,1,17,1,17,3,17,131,8,17,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,5,24,
        162,8,24,10,24,12,24,165,9,24,1,25,4,25,168,8,25,11,25,12,25,169,
        1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,1,0,7,1,0,49,57,1,0,48,57,3,0,42,43,45,
        45,47,47,2,0,60,60,62,62,2,0,65,90,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,184,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,
        0,5,57,1,0,0,0,7,59,1,0,0,0,9,70,1,0,0,0,11,83,1,0,0,0,13,85,1,0,
        0,0,15,91,1,0,0,0,17,95,1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,
        104,1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,112,
        1,0,0,0,33,123,1,0,0,0,35,130,1,0,0,0,37,132,1,0,0,0,39,137,1,0,
        0,0,41,143,1,0,0,0,43,145,1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,
        49,159,1,0,0,0,51,167,1,0,0,0,53,54,5,42,0,0,54,2,1,0,0,0,55,56,
        5,47,0,0,56,4,1,0,0,0,57,58,5,43,0,0,58,6,1,0,0,0,59,60,5,45,0,0,
        60,8,1,0,0,0,61,62,5,84,0,0,62,63,5,114,0,0,63,64,5,117,0,0,64,71,
        5,101,0,0,65,66,5,70,0,0,66,67,5,97,0,0,67,68,5,108,0,0,68,69,5,
        115,0,0,69,71,5,101,0,0,70,61,1,0,0,0,70,65,1,0,0,0,71,10,1,0,0,
        0,72,74,5,45,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,79,
        7,0,0,0,76,78,7,1,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,
        79,80,1,0,0,0,80,84,1,0,0,0,81,79,1,0,0,0,82,84,5,48,0,0,83,73,1,
        0,0,0,83,82,1,0,0,0,84,12,1,0,0,0,85,86,5,99,0,0,86,87,5,111,0,0,
        87,88,5,110,0,0,88,89,5,115,0,0,89,90,5,116,0,0,90,14,1,0,0,0,91,
        92,5,105,0,0,92,93,5,110,0,0,93,94,5,116,0,0,94,16,1,0,0,0,95,96,
        5,98,0,0,96,97,5,111,0,0,97,98,5,111,0,0,98,99,5,108,0,0,99,18,1,
        0,0,0,100,101,5,40,0,0,101,20,1,0,0,0,102,103,5,41,0,0,103,22,1,
        0,0,0,104,105,5,123,0,0,105,24,1,0,0,0,106,107,5,125,0,0,107,26,
        1,0,0,0,108,109,5,59,0,0,109,28,1,0,0,0,110,111,5,61,0,0,111,30,
        1,0,0,0,112,113,7,2,0,0,113,32,1,0,0,0,114,124,7,3,0,0,115,116,5,
        61,0,0,116,124,5,61,0,0,117,118,5,33,0,0,118,124,5,61,0,0,119,120,
        5,62,0,0,120,124,5,61,0,0,121,122,5,60,0,0,122,124,5,61,0,0,123,
        114,1,0,0,0,123,115,1,0,0,0,123,117,1,0,0,0,123,119,1,0,0,0,123,
        121,1,0,0,0,124,34,1,0,0,0,125,126,5,38,0,0,126,131,5,38,0,0,127,
        128,5,124,0,0,128,131,5,124,0,0,129,131,5,94,0,0,130,125,1,0,0,0,
        130,127,1,0,0,0,130,129,1,0,0,0,131,36,1,0,0,0,132,133,5,114,0,0,
        133,134,5,101,0,0,134,135,5,97,0,0,135,136,5,100,0,0,136,38,1,0,
        0,0,137,138,5,119,0,0,138,139,5,114,0,0,139,140,5,105,0,0,140,141,
        5,116,0,0,141,142,5,101,0,0,142,40,1,0,0,0,143,144,5,33,0,0,144,
        42,1,0,0,0,145,146,5,119,0,0,146,147,5,104,0,0,147,148,5,105,0,0,
        148,149,5,108,0,0,149,150,5,101,0,0,150,44,1,0,0,0,151,152,5,105,
        0,0,152,153,5,102,0,0,153,46,1,0,0,0,154,155,5,101,0,0,155,156,5,
        108,0,0,156,157,5,115,0,0,157,158,5,101,0,0,158,48,1,0,0,0,159,163,
        7,4,0,0,160,162,7,5,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
        1,0,0,0,163,164,1,0,0,0,164,50,1,0,0,0,165,163,1,0,0,0,166,168,7,
        6,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,
        0,0,0,170,171,1,0,0,0,171,172,6,25,0,0,172,52,1,0,0,0,9,0,70,73,
        79,83,123,130,163,169,1,6,0,0
    ]

class MiniGPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    BOOL = 5
    INT = 6
    CONST = 7
    INT_TYPE = 8
    BOOL_TYPE = 9
    LPAREN = 10
    RPAREN = 11
    LBRACE = 12
    RBRACE = 13
    SEMICOLON = 14
    ASSIGMENT_OPERATOR = 15
    EXPRESION_OPERATOR = 16
    EXPRESION_COMPARASON_OPERATOP = 17
    CONDITION_OPERATOR = 18
    READ = 19
    WRITE = 20
    NEGATION_OPERATOR = 21
    WHILE = 22
    IF = 23
    ELSE = 24
    VAR = 25
    WHITESPACE = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'+'", "'-'", "'const'", "'int'", "'bool'", "'('", 
            "')'", "'{'", "'}'", "';'", "'='", "'read'", "'write'", "'!'", 
            "'while'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "INT", "CONST", "INT_TYPE", "BOOL_TYPE", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", "EXPRESION_OPERATOR", 
            "EXPRESION_COMPARASON_OPERATOP", "CONDITION_OPERATOR", "READ", 
            "WRITE", "NEGATION_OPERATOR", "WHILE", "IF", "ELSE", "VAR", 
            "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "BOOL", "INT", "CONST", 
                  "INT_TYPE", "BOOL_TYPE", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", "EXPRESION_OPERATOR", 
                  "EXPRESION_COMPARASON_OPERATOP", "CONDITION_OPERATOR", 
                  "READ", "WRITE", "NEGATION_OPERATOR", "WHILE", "IF", "ELSE", 
                  "VAR", "WHITESPACE" ]

    grammarFileName = "MiniGP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


