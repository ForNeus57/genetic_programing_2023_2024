# Generated from C:/Users/domin/IdeaProjects/genetic_programing_2023_2024/grammar/MiniGP.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,135,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,63,8,7,1,8,1,8,1,8,1,8,3,8,69,8,8,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,107,8,15,1,16,
        3,16,110,8,16,1,16,1,16,5,16,114,8,16,10,16,12,16,117,9,16,1,16,
        3,16,120,8,16,1,17,1,17,5,17,124,8,17,10,17,12,17,127,9,17,1,18,
        4,18,130,8,18,11,18,12,18,131,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,1,0,7,3,0,42,43,45,45,47,47,2,0,60,60,62,62,1,
        0,49,57,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,145,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,
        1,0,0,0,11,49,1,0,0,0,13,51,1,0,0,0,15,62,1,0,0,0,17,68,1,0,0,0,
        19,70,1,0,0,0,21,72,1,0,0,0,23,77,1,0,0,0,25,83,1,0,0,0,27,89,1,
        0,0,0,29,92,1,0,0,0,31,106,1,0,0,0,33,119,1,0,0,0,35,121,1,0,0,0,
        37,129,1,0,0,0,39,40,5,40,0,0,40,2,1,0,0,0,41,42,5,41,0,0,42,4,1,
        0,0,0,43,44,5,123,0,0,44,6,1,0,0,0,45,46,5,125,0,0,46,8,1,0,0,0,
        47,48,5,59,0,0,48,10,1,0,0,0,49,50,5,61,0,0,50,12,1,0,0,0,51,52,
        7,0,0,0,52,14,1,0,0,0,53,63,7,1,0,0,54,55,5,61,0,0,55,63,5,61,0,
        0,56,57,5,33,0,0,57,63,5,61,0,0,58,59,5,62,0,0,59,63,5,61,0,0,60,
        61,5,60,0,0,61,63,5,61,0,0,62,53,1,0,0,0,62,54,1,0,0,0,62,56,1,0,
        0,0,62,58,1,0,0,0,62,60,1,0,0,0,63,16,1,0,0,0,64,65,5,38,0,0,65,
        69,5,38,0,0,66,67,5,124,0,0,67,69,5,124,0,0,68,64,1,0,0,0,68,66,
        1,0,0,0,69,18,1,0,0,0,70,71,5,33,0,0,71,20,1,0,0,0,72,73,5,114,0,
        0,73,74,5,101,0,0,74,75,5,97,0,0,75,76,5,100,0,0,76,22,1,0,0,0,77,
        78,5,119,0,0,78,79,5,114,0,0,79,80,5,105,0,0,80,81,5,116,0,0,81,
        82,5,101,0,0,82,24,1,0,0,0,83,84,5,119,0,0,84,85,5,104,0,0,85,86,
        5,105,0,0,86,87,5,108,0,0,87,88,5,101,0,0,88,26,1,0,0,0,89,90,5,
        105,0,0,90,91,5,102,0,0,91,28,1,0,0,0,92,93,5,101,0,0,93,94,5,108,
        0,0,94,95,5,115,0,0,95,96,5,101,0,0,96,30,1,0,0,0,97,98,5,116,0,
        0,98,99,5,114,0,0,99,100,5,117,0,0,100,107,5,101,0,0,101,102,5,102,
        0,0,102,103,5,97,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,107,
        5,101,0,0,106,97,1,0,0,0,106,101,1,0,0,0,107,32,1,0,0,0,108,110,
        5,45,0,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,115,
        7,2,0,0,112,114,7,3,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,
        1,0,0,0,115,116,1,0,0,0,116,120,1,0,0,0,117,115,1,0,0,0,118,120,
        5,48,0,0,119,109,1,0,0,0,119,118,1,0,0,0,120,34,1,0,0,0,121,125,
        7,4,0,0,122,124,7,5,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,
        1,0,0,0,125,126,1,0,0,0,126,36,1,0,0,0,127,125,1,0,0,0,128,130,7,
        6,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,
        0,0,0,132,133,1,0,0,0,133,134,6,18,0,0,134,38,1,0,0,0,9,0,62,68,
        106,109,115,119,125,131,1,6,0,0
    ]

class MiniGPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LPAREN = 1
    RPAREN = 2
    LBRACE = 3
    RBRACE = 4
    SEMICOLON = 5
    ASSIGMENT_OPERATOR = 6
    EXPRESSION_OPERATOR = 7
    EXPRESSION_COMPARISON_OPERATOR = 8
    CONDITION_OPERATOR = 9
    NEGATION_OPERATOR = 10
    READ = 11
    WRITE = 12
    WHILE = 13
    IF = 14
    ELSE = 15
    BOOL = 16
    INT = 17
    VAR = 18
    WHITESPACE = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "'!'", "'read'", "'write'", 
            "'while'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", 
            "EXPRESSION_OPERATOR", "EXPRESSION_COMPARISON_OPERATOR", "CONDITION_OPERATOR", 
            "NEGATION_OPERATOR", "READ", "WRITE", "WHILE", "IF", "ELSE", 
            "BOOL", "INT", "VAR", "WHITESPACE" ]

    ruleNames = [ "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", "ASSIGMENT_OPERATOR", 
                  "EXPRESSION_OPERATOR", "EXPRESSION_COMPARISON_OPERATOR", 
                  "CONDITION_OPERATOR", "NEGATION_OPERATOR", "READ", "WRITE", 
                  "WHILE", "IF", "ELSE", "BOOL", "INT", "VAR", "WHITESPACE" ]

    grammarFileName = "MiniGP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


